From c40ee19f6a320d5933c4071fbc1957f211b5bac4 Mon Sep 17 00:00:00 2001
From: =?utf-8?q?Olivier=20Cr=C3=AAte?= <olivier.crete@collabora.co.uk>
Date: Wed, 2 Sep 2009 15:21:02 -0400
Subject: [PATCH] rtpjitterbuffer: Lock clock_rate variable

The priv->clock_rate variable could become -1 between when its checked to not
be -1 and when its used, causing an assertion. Fixed by taking the mutex
earlier in the chain() function.

Fixes #593955
---
 gst/rtpmanager/gstrtpjitterbuffer.c |   49 ++++++++++++++++++++++-------------
 1 files changed, 31 insertions(+), 18 deletions(-)

diff --git a/gst/rtpmanager/gstrtpjitterbuffer.c b/gst/rtpmanager/gstrtpjitterbuffer.c
index 5512605..391d66d 100644
--- a/gst/rtpmanager/gstrtpjitterbuffer.c
+++ b/gst/rtpmanager/gstrtpjitterbuffer.c
@@ -607,7 +607,10 @@ gst_rtp_jitter_buffer_clear_pt_map (GstRtpJitterBuffer * jitterbuffer)
   priv = jitterbuffer->priv;
 
   /* this will trigger a new pt-map request signal, FIXME, do something better. */
+
+  JBUF_LOCK (priv);
   priv->clock_rate = -1;
+  JBUF_UNLOCK (priv);
 }
 
 static GstCaps *
@@ -645,6 +648,10 @@ gst_rtp_jitter_buffer_getcaps (GstPad * pad)
   return caps;
 }
 
+/*
+ * Must be called with JBUF_LOCK held
+ */
+
 static gboolean
 gst_jitter_buffer_sink_parse_caps (GstRtpJitterBuffer * jitterbuffer,
     GstCaps * caps)
@@ -735,7 +742,9 @@ gst_jitter_buffer_sink_setcaps (GstPad * pad, GstCaps * caps)
   jitterbuffer = GST_RTP_JITTER_BUFFER (gst_pad_get_parent (pad));
   priv = jitterbuffer->priv;
 
+  JBUF_LOCK (priv);
   res = gst_jitter_buffer_sink_parse_caps (jitterbuffer, caps);
+  JBUF_UNLOCK (priv);
 
   /* set same caps on srcpad on success */
   if (res)
@@ -1030,6 +1039,10 @@ gst_rtp_jitter_buffer_sink_rtcp_event (GstPad * pad, GstEvent * event)
   return TRUE;
 }
 
+/*
+ * Must be called with JBUF_LOCK held
+ */
+
 static gboolean
 gst_rtp_jitter_buffer_get_clock_rate (GstRtpJitterBuffer * jitterbuffer,
     guint8 pt)
@@ -1092,6 +1105,23 @@ gst_rtp_jitter_buffer_chain (GstPad * pad, GstBuffer * buffer)
 
   pt = gst_rtp_buffer_get_payload_type (buffer);
 
+  /* take the timestamp of the buffer. This is the time when the packet was
+   * received and is used to calculate jitter and clock skew. We will adjust
+   * this timestamp with the smoothed value after processing it in the
+   * jitterbuffer. */
+  timestamp = GST_BUFFER_TIMESTAMP (buffer);
+  /* bring to running time */
+  timestamp = gst_segment_to_running_time (&priv->segment, GST_FORMAT_TIME,
+      timestamp);
+
+  seqnum = gst_rtp_buffer_get_seq (buffer);
+
+  GST_DEBUG_OBJECT (jitterbuffer,
+      "Received packet #%d at time %" GST_TIME_FORMAT, seqnum,
+      GST_TIME_ARGS (timestamp));
+
+  JBUF_LOCK_CHECK (priv, out_flushing);
+
   if (G_UNLIKELY (priv->last_pt != pt)) {
     GstCaps *caps;
 
@@ -1115,22 +1145,6 @@ gst_rtp_jitter_buffer_chain (GstPad * pad, GstBuffer * buffer)
       goto no_clock_rate;
   }
 
-  /* take the timestamp of the buffer. This is the time when the packet was
-   * received and is used to calculate jitter and clock skew. We will adjust
-   * this timestamp with the smoothed value after processing it in the
-   * jitterbuffer. */
-  timestamp = GST_BUFFER_TIMESTAMP (buffer);
-  /* bring to running time */
-  timestamp = gst_segment_to_running_time (&priv->segment, GST_FORMAT_TIME,
-      timestamp);
-
-  seqnum = gst_rtp_buffer_get_seq (buffer);
-
-  GST_DEBUG_OBJECT (jitterbuffer,
-      "Received packet #%d at time %" GST_TIME_FORMAT, seqnum,
-      GST_TIME_ARGS (timestamp));
-
-  JBUF_LOCK_CHECK (priv, out_flushing);
   /* don't accept more data on EOS */
   if (G_UNLIKELY (priv->eos))
     goto have_eos;
@@ -1250,8 +1264,7 @@ no_clock_rate:
     GST_WARNING_OBJECT (jitterbuffer,
         "No clock-rate in caps!, dropping buffer");
     gst_buffer_unref (buffer);
-    gst_object_unref (jitterbuffer);
-    return GST_FLOW_OK;
+    goto finished;
   }
 out_flushing:
   {
